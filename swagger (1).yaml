swagger: "2.0"
info:
  description: "A swagger doc for the given three endpoints:
  
`GET /v1/weather` —will get the weather by mocking GET /data/2.5/weather enndpoint

`GET /v1/hello`  —will get a greeting message

`POST /v1/auth` -will give the authorization after verifying the username and password"
  version: "1.0.0"
  title: "Assignment 4"
  contact:
    email: "raner@oregonstate.edu"
  license:
    name: "myLicense"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost:3000"
basePath: "/v1"
tags:
- name: "Ritika"
  description: "ME"
  #externalDocs:
   # description: "Find out more"
    #url: ""
schemes:
- "http"
paths:
  /weather:      
    get:
      tags:
      - "user"
      summary: "Current Temperature of Corvallis"
      description: "Get the temperature"
      operationId: "getWeather"
      produces:
      - "application/json"
      parameters:
      - name: "Name"
        in: "query" 
        description: "Enter name of the city"
        required: true
        type: "string"
      - name: "API Key"  
        in: "query"
        description: "Enter your API key"
        required: true
        type: "string"
      - name: "tokenn"
        in: "query"
        description: "Pass the token"
        required: true
        type: "string"
      responses:
        "200":
          description: "Success"
          schema:
            type: "string"
        "400":
          description: "Please enter a valid API Key"
  /hello:
    get:
      tags:
      - "user"
      summary: "return a random greeting"
      description: ""
      operationId: "get_hello"
      produces:
      - "application/json"
      parameters:
      - name: "tokenn"
        in: "query"
        description: "Pass the token"
        required: true
        type: "string"
      responses:
        200:
          description: "Send the greeting message."
        400:
          description: "Bad request"
  
  /auth:
    post:
      tags:
      - "user"
      summary: "Get token"
      description: ""
      operationId: "userlogin"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "Details"
        description: "Enter the username and password"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        200:
          description: "Token generated successfully"
        400:
          description: "Bad request"
        401:
          description: "You are not authorized"
        
          
definitions:
  User:
    type: "object"
    properties:
      username:
        type: "string"
      password:
        type: "string"
        description: "Get Token"
    xml:
      name: "User"
  
